name: Run PHPUnit with Coverage and Post Comments

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout do c√≥digo
      - name: Checkout code
        uses: actions/checkout@v3

      # Configura√ß√£o do PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xdebug

      # Instala√ß√£o das depend√™ncias do Composer
      - name: Install dependencies
        run: |
          composer install

      # Executa os testes PHPUnit
      - name: Run PHPUnit tests with coverage
        run: |
          vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=junit.xml

      # Verificar a cobertura do c√≥digo
      - name: Check coverage
        run: |
          COVERAGE=$(php -r "
              libxml_use_internal_errors(true);
              \$xml = simplexml_load_file('coverage.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo coverage.xml';
                  exit(1);
              }
              // Calcula a cobertura como (coveredelements / elements) * 100
              \$coverage = (\$xml->project->metrics['coveredelements'] / \$xml->project->metrics['elements']) * 100;
              echo \$coverage;
          ")

          # Verifica se a cobertura est√° abaixo de 60%
          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
              echo "Cobertura abaixo de 60%: $COVERAGE%"
              exit 1
          else
              echo "Cobertura OK: $COVERAGE%"
          fi

      # Extrair m√©tricas do arquivo junit.xml
      - name: Extract JUnit metrics
        run: |
          TOTAL_TESTS=$(xmllint --xpath "string(//testsuites/@tests)" junit.xml || echo "0")
          FAILURES=$(xmllint --xpath "string(//testsuites/@failures)" junit.xml || echo "0")
          SKIPPED=$(xmllint --xpath "string(//testsuites/@skipped)" junit.xml || echo "0")
          TIME=$(xmllint --xpath "string(//testsuites/@time)" junit.xml || echo "0")

      # Gerar o corpo do coment√°rio com as m√©tricas
      - name: Generate PR Comment Body
        id: coverage
        run: |
          COMMENT_BODY="### PHPUnit Test Coverage Report üöÄ\n\n- **Total Coverage:** $COVERAGE%\n- **Total Tests:** $TOTAL_TESTS\n- **Failures:** $FAILURES\n- **Skipped:** $SKIPPED\n- **Execution Time:** $TIME seconds\n\n---\n\n*Keep up the great work! üí™*"
          echo "$COMMENT_BODY" > comment.json

      # Postar o coment√°rio na PR
      - name: Post comment on PR
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d @comment.json \
          "${{ github.event.pull_request.comments_url }}"
