name: Run PHPUnit with Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout do c√≥digo
      - name: Checkout code
        uses: actions/checkout@v3

      # Configura√ß√£o do PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xdebug

      # Instala√ß√£o das depend√™ncias do Composer
      - name: Install dependencies
        run: |
          composer install

      # Executa os testes PHPUnit com cobertura
      - name: Run PHPUnit tests with coverage
        run: |
          vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=junit.xml

      # Extrair dados do arquivo coverage.xml e junit.xml
      - name: Extract coverage and test results
        id: extract_data
        run: |
          # Extrair a cobertura total de coverage.xml
          COVERAGE=$(php -r "
              libxml_use_internal_errors(true);
              \$xml = simplexml_load_file('coverage.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo coverage.xml';
                  exit(1);
              }
              \$coverage = (\$xml->project->metrics['coveredelements'] / \$xml->project->metrics['elements']) * 100;
              echo \$coverage;
          ")

          # Verificar a exist√™ncia do junit.xml e extrair dados
          if [[ ! -f junit.xml ]]; then
              echo "JUnit XML file not found. Skipping metrics extraction."
              TOTAL_TESTS=0
              FAILURES=0
              SKIPPED=0
              TIME=0
          else
              # Extrair m√©tricas do arquivo junit.xml
              TOTAL_TESTS=$(xmllint --xpath "string(//testsuite/@tests)" junit.xml || echo "0")
              FAILURES=$(xmllint --xpath "string(//testsuite/@failures)" junit.xml || echo "0")
              SKIPPED=$(xmllint --xpath "string(//testsuite/@skipped)" junit.xml || echo "0")
              TIME=$(xmllint --xpath "string(//testsuite/@time)" junit.xml || echo "0")
          fi

          # Garantir que o n√∫mero de testes e tempo de execu√ß√£o n√£o sejam zero
          if [[ "$TOTAL_TESTS" == "0" ]]; then
              TOTAL_TESTS="N/A"
          fi
          if [[ "$TIME" == "0" ]]; then
              TIME="N/A"
          fi

          # Criar o corpo do coment√°rio
          COMMENT_BODY=$(jq -n --arg coverage "$COVERAGE" --arg total "$TOTAL_TESTS" --arg failures "$FAILURES" --arg skipped "$SKIPPED" --arg time "$TIME" \
          '{"body": "### PHPUnit Test Coverage Report üöÄ\n\n- **Total Coverage:** \($coverage)%\n- **Total Tests:** \($total)\n- **Failures:** \($failures)\n- **Skipped:** \($skipped)\n- **Execution Time:** \($time) seconds\n"}')

          echo "$COMMENT_BODY" > comment.json

      # Postar o coment√°rio na PR
      - name: Post comment on PR
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d @comment.json \
          "${{ github.event.pull_request.comments_url }}"
