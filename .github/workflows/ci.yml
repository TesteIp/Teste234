name: Run PHPUnit with Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuração do PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xdebug

      # Instalação das dependências do Composer
      - name: Install dependencies
        run: |
          composer install

      # Executa os testes PHPUnit
      - name: Run PHPUnit tests with coverage
        run: |
          vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=junit.xml

      # Verificar e postar cobertura, permitindo falhas no teste
      - name: Post Coverage Result
        if: always()  # Isso garante que o comentário será postado, mesmo com falha
        run: |
          COVERAGE=$(php -r "
              libxml_use_internal_errors(true);
              \$xml = simplexml_load_file('coverage.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo coverage.xml';
                  exit(1);
              }
              // Calcula a cobertura como (coveredelements / elements) * 100
              \$coverage = (\$xml->project->metrics['coveredelements'] / \$xml->project->metrics['elements']) * 100;
              echo \$coverage;
          ")
          
          # Criar o comentário
          COMMENT="### PHPUnit Test Coverage Report 🚀
          - **Total Coverage:** \$COVERAGE%
          - **Total Tests:** $(grep -o 'tests="[^"]*' junit.xml | head -n 1 | sed 's/tests="//')
          - **Failures:** $(grep -o 'failures="[^"]*' junit.xml | head -n 1 | sed 's/failures="//')
          - **Skipped:** $(grep -o 'skipped="[^"]*' junit.xml | head -n 1 | sed 's/skipped="//')
          - **Execution Time:** $(grep -o 'time="[^"]*' junit.xml | head -n 1 | sed 's/time="//')
          
          "
          
          # Postar o comentário no PR
          curl -H "Authorization: token ${{ secrets.PAT_TOKEN }}" -X POST \
            -d "{\"body\": \"$COMMENT\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
