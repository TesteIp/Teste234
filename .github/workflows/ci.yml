name: PHPUnit with Coverage and PR Comments

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xdebug

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Install dependencies
        run: |
          composer install

      - name: Run PHPUnit tests with coverage and log
        run: |
          vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=junit.xml

      - name: Show content of coverage.xml
        run: cat coverage.xml  # Adicionando para depuraÃ§Ã£o

      - name: Generate PR Comment Body
        id: coverage
        run: |
          # Extrair cobertura total
          TOTAL_COVERAGE=$(php -r "
              libxml_use_internal_errors(true);
              \$xml = simplexml_load_file('coverage.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo coverage.xml';
                  exit(1);
              }
              \$coverage = (\$xml->project->metrics['coveredelements'] / \$xml->project->metrics['elements']) * 100;
              echo \$coverage;
          ")

          # Verificar a existÃªncia do junit.xml
          if [[ ! -f junit.xml ]]; then
              echo "JUnit XML file not found. Skipping metrics extraction."
              TOTAL_TESTS=0
              FAILURES=0
              SKIPPED=0
              TIME=0
          else
              # Extrair mÃ©tricas do arquivo junit.xml
              TOTAL_TESTS=$(xmllint --xpath "string(//testsuites/@tests)" junit.xml || echo "0")
              FAILURES=$(xmllint --xpath "string(//testsuites/@failures)" junit.xml || echo "0")
              SKIPPED=$(xmllint --xpath "string(//testsuites/@skipped)" junit.xml || echo "0")
              TIME=$(xmllint --xpath "string(//testsuites/@time)" junit.xml || echo "0")
          fi

          # Criar o corpo do comentÃ¡rio
          COMMENT_BODY=$(jq -n --arg coverage "$TOTAL_COVERAGE" --arg total "$TOTAL_TESTS" --arg failures "$FAILURES" --arg skipped "$SKIPPED" --arg time "$TIME" \
          '{"body": "### PHPUnit Test Coverage Report ðŸš€\n\n- **Total Coverage:** \($coverage)%\n- **Total Tests:** \($total)\n- **Failures:** \($failures)\n- **Skipped:** \($skipped)\n- **Execution Time:** \($time) seconds\n"}')

          echo "$COMMENT_BODY" > comment.json

      - name: Post comment on PR
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d @comment.json \
          "${{ github.event.pull_request.comments_url }}"
