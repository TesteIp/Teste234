name: Run PHPUnit with Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout do cÃ³digo
      - name: Checkout code
        uses: actions/checkout@v3

      # ConfiguraÃ§Ã£o do PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xdebug

      # InstalaÃ§Ã£o das dependÃªncias do Composer
      - name: Install dependencies
        run: |
          composer install

      # Executa os testes PHPUnit
      - name: Run PHPUnit tests with coverage
        run: |
          vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=junit.xml

      # Extrair a cobertura e os resultados dos testes
      - name: Extract coverage and test results
        id: extract_data
        run: |
          # Extrair a cobertura total de coverage.xml
          COVERAGE=$(php -r "
              libxml_use_internal_errors(true);
              \$xml = simplexml_load_file('coverage.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo coverage.xml';
                  exit(1);
              }
              \$coverage = (\$xml->project->metrics['coveredelements'] / \$xml->project->metrics['elements']) * 100;
              echo \$coverage;
          ")

          # Extrair dados de junit.xml usando PHP
          TOTAL_TESTS=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo junit.xml';
                  exit(1);
              }
              echo (string) \$xml->testsuite['tests'];
          ")
          FAILURES=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo junit.xml';
                  exit(1);
              }
              echo (string) \$xml->testsuite['failures'];
          ")
          SKIPPED=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo junit.xml';
                  exit(1);
              }
              echo (string) \$xml->testsuite['skipped'];
          ")
          TIME=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo junit.xml';
                  exit(1);
              }
              echo (string) \$xml->testsuite['time'];
          ")

          # Se nÃ£o houver dados, colocar como "N/A"
          if [[ "$TOTAL_TESTS" == "" || "$TOTAL_TESTS" == "0" ]]; then
              TOTAL_TESTS="N/A"
          fi
          if [[ "$TIME" == "" || "$TIME" == "0" ]]; then
              TIME="N/A"
          fi

          # Criar o corpo do comentÃ¡rio
          COMMENT_BODY=$(jq -n --arg coverage "$COVERAGE" --arg total "$TOTAL_TESTS" --arg failures "$FAILURES" --arg skipped "$SKIPPED" --arg time "$TIME" \
          '{"body": "### PHPUnit Test Coverage Report ğŸš€\n\n- **Total Coverage:** \($coverage)%\n- **Total Tests:** \($total)\n- **Failures:** \($failures)\n- **Skipped:** \($skipped)\n- **Execution Time:** \($time) seconds\n"}')

          echo "$COMMENT_BODY" > comment.json

      # Comentar na PR com o resultado do teste
      - name: Post comment on PR
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.extract_data.outputs.body }}
