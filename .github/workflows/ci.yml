name: Run PHPUnit with Coverage and Post Comments

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout do c√≥digo
      - name: Checkout code
        uses: actions/checkout@v3

      # Configura√ß√£o do PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xdebug

      # Instala√ß√£o das depend√™ncias do Composer
      - name: Install dependencies
        run: |
          composer install

      # Executa os testes PHPUnit
      - name: Run PHPUnit tests with coverage
        run: |
          vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=junit.xml

      # Verificar a cobertura do c√≥digo
      - name: Check coverage
        id: coverage_check
        continue-on-error: true
        run: |
          COVERAGE=$(php -r "
              libxml_use_internal_errors(true);
              \$xml = simplexml_load_file('coverage.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo coverage.xml';
                  exit(1);
              }
              \$coverage = (\$xml->project->metrics['coveredelements'] / \$xml->project->metrics['elements']) * 100;
              echo round(\$coverage, 2);
          ")

          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
              echo "Cobertura abaixo de 60%: $COVERAGE%"
              exit 1
          else
              echo "Cobertura OK: $COVERAGE%"
          fi

      # Extrair m√©tricas do arquivo junit.xml
      - name: Extract JUnit metrics
        id: junit_metrics
        run: |
          TOTAL_TESTS=$(xmllint --xpath "string(//testsuite/@tests)" junit.xml || echo "N/A")
          FAILURES=$(xmllint --xpath "string(//testsuite/@failures)" junit.xml || echo "N/A")
          SKIPPED=$(xmllint --xpath "string(//testsuite/@skipped)" junit.xml || echo "N/A")
          TIME=$(xmllint --xpath "string(//testsuite/@time)" junit.xml || echo "N/A")

          echo "TOTAL_TESTS=$TOTAL_TESTS" >> $GITHUB_ENV
          echo "FAILURES=$FAILURES" >> $GITHUB_ENV
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
          echo "TIME=$TIME" >> $GITHUB_ENV

      # Gerar o corpo do coment√°rio com as m√©tricas
      - name: Generate PR Comment Body
        id: generate_comment
        run: |
          COMMENT_BODY="### PHPUnit Test Coverage Report üöÄ\n\n- **Total Coverage:** ${{ env.COVERAGE }}%\n- **Total Tests:** ${{ env.TOTAL_TESTS }}\n- **Failures:** ${{ env.FAILURES }}\n- **Skipped:** ${{ env.SKIPPED }}\n- **Execution Time:** ${{ env.TIME }} seconds\n"
          echo "COMMENT_BODY=$COMMENT_BODY" >> $GITHUB_ENV

      # Postar o coment√°rio na PR
      - name: Post comment on PR
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{\"body\": \"${{ env.COMMENT_BODY }}\"}" \
          "${{ github.event.pull_request.comments_url }}"

      # Bloquear o merge se a cobertura for inferior a 60%
      - name: Block merge if coverage < 60
        if: ${{ steps.coverage_check.outcome == 'failure' }}
        run: |
          echo "Cobertura de testes abaixo de 60%, bloqueando o merge!"
          exit 1
