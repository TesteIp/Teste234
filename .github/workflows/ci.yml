name: CI/CD Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - master
      - dev

permissions:
  contents: write
  pull-requests: write

jobs:
  # ------------------------- JOB 1: TESTES COM PHPUNIT -------------------------
  tests:
    if: ${{ github.event.action != 'closed' }}  # S√≥ roda se o PR n√£o foi fechado
    name: Executar Testes e Verificar Cobertura
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Configurar PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xdebug

      - name: Instalar depend√™ncias do Composer
        run: composer install

      - name: Executar PHPUnit com cobertura
        run: |
          vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=junit.xml

      - name: Extrair cobertura de c√≥digo
        id: coverage_check
        run: |
          COVERAGE=$(php -r "
              libxml_use_internal_errors(true);
              \$xml = simplexml_load_file('coverage.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo coverage.xml';
                  exit(1);
              }
              \$coverage = (\$xml->project->metrics['coveredelements'] / \$xml->project->metrics['elements']) * 100;
              echo round(\$coverage, 2);
          ")
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Cobertura calculada: $COVERAGE%"

      - name: Analisar junit.xml para obter m√©tricas
        id: parse_junit
        run: |
          TESTS=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (int) \$xml->testsuite['tests'];
          ")
          FAILURES=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (int) \$xml->testsuite['failures'];
          ")
          SKIPPED=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (int) \$xml->testsuite['skipped'];
          ")
          TIME=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (float) \$xml->testsuite['time'];
          ")

          echo "total_tests=$TESTS" >> $GITHUB_ENV
          echo "failures=$FAILURES" >> $GITHUB_ENV
          echo "skipped=$SKIPPED" >> $GITHUB_ENV
          echo "execution_time=$TIME" >> $GITHUB_ENV

      - name: Publicar resultados dos testes na PR
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### üß™ PHPUnit Test Coverage Report 

            - **Total Coverage:** ${{ env.COVERAGE }}%
            - **Total Tests:** ${{ env.total_tests }}
            - **Failures:** ${{ env.failures }}
            - **Skipped:** ${{ env.skipped }}
            - **Execution Time:** ${{ env.execution_time }} seconds

      - name: Validar falhas nos testes
        if: always() 
        run: |
          if [ ${{ env.failures }} -gt 0 ]; then
              echo "‚ùå Existem falhas nos testes: ${{ env.failures }}"
              exit 1
          fi

  # ------------------------- JOB 2: MERGE BACK HOTFIX -------------------------
  merge-back:
    if: ${{ github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'hotfix/') }}
    name: Merge Back para Dev
    runs-on: ubuntu-latest
    needs: tests  # S√≥ roda depois que os testes passam

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Criar Pull Request da master para dev
        id: create_pr
        run: |
          PR_URL=$(gh pr create \
            --base dev \
            --head master \
            --title "Merge back hotfix para dev" \
            --body "Sincronizando as corre√ß√µes da master para dev.")
          PR_NUMBER=$(echo $PR_URL | grep -oE '[0-9]+$')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Mesclar PR automaticamente (Squash)
        if: env.PR_NUMBER != ''
        run: |
          gh pr merge $PR_NUMBER --squash
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Notificar no Slack (Erro)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "‚ùå Ocorreu um erro ao tentar mesclar o PR #${{ env.PR_NUMBER }} \n*Link:* ${{ env.PR_URL }}"
          }' ${{ secrets.SLACK }}
