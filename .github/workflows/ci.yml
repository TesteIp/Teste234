name: Run PHPUnit with Coverage and PR Comments

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuração do PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: xdebug

      # Instalação das dependências do Composer
      - name: Install dependencies
        run: |
          composer install

      # Instalar xmllint para extrair dados do junit.xml
      - name: Install xmllint
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      # Executa os testes PHPUnit com cobertura
      - name: Run PHPUnit tests with coverage
        run: |
          vendor/bin/phpunit --log-junit=junit.xml --coverage-clover=coverage.xml

      # Extrair dados de cobertura e resultados dos testes
      - name: Extract test results and coverage
        run: |
          # Extrair dados do junit.xml
          TESTS=$(xmllint --xpath "string(//testsuite/@tests)" junit.xml)
          FAILURES=$(xmllint --xpath "string(//testsuite/@failures)" junit.xml)
          SKIPPED=$(xmllint --xpath "string(//testsuite/@skipped)" junit.xml)
          TIME=$(xmllint --xpath "string(//testsuite/@time)" junit.xml)
          
          # Extrair cobertura do arquivo coverage.xml
          COVERAGE=$(php -r "
              libxml_use_internal_errors(true);
              \$xml = simplexml_load_file('coverage.xml');
              if (\$xml === false) {
                  echo 'Erro ao carregar o arquivo coverage.xml';
                  exit(1);
              }
              // Calcula a cobertura como (coveredelements / elements) * 100
              \$coverage = (\$xml->project->metrics['coveredelements'] / \$xml->project->metrics['elements']) * 100;
              echo \$coverage;
          ")
          
          # Definir variáveis de ambiente
          echo "tests=$TESTS" >> $GITHUB_ENV
          echo "failures=$FAILURES" >> $GITHUB_ENV
          echo "skipped=$SKIPPED" >> $GITHUB_ENV
          echo "time=$TIME" >> $GITHUB_ENV
          echo "coverage=$COVERAGE" >> $GITHUB_ENV

      # Adicionar comentário na PR com o resultado dos testes e cobertura
      - name: Post comment on PR
        if: ${{ github.event_name == 'pull_request' }}
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}  # Certifique-se de que o PAT_TOKEN está configurado corretamente
          COVERAGE: ${{ env.coverage }}
          TESTS: ${{ env.tests }}
          FAILURES: ${{ env.failures }}
          SKIPPED: ${{ env.skipped }}
          TIME: ${{ env.time }}
        run: |
          # Verificando se estamos em um evento de Pull Request
          echo "Evento: ${{ github.event_name }}"
          
          # Verifica se a URL da PR está correta
          echo "PR URL: ${{ github.event.pull_request.url }}"

          # Verificar se o PAT_TOKEN está sendo passado corretamente
          echo "PAT_TOKEN: $PAT_TOKEN"

          COMMENT_BODY="### PHPUnit Test Results 🚀\n\n
          - **Total Tests:** $TESTS\n
          - **Failures:** $FAILURES\n
          - **Skipped:** $SKIPPED\n
          - **Execution Time:** $TIME seconds\n
          - **Coverage:** $COVERAGE%\n"

          # Exibir o comentário antes de postar
          echo "Comment Body: $COMMENT_BODY"

          # Postar o comentário na PR usando seu token PAT_TOKEN
          curl -X POST -H "Authorization: token $PAT_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$(jq -n --arg body "$COMMENT_BODY" '{body: $body}')" \
          "${{ github.event.pull_request.url }}/comments"

